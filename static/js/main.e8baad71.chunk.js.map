{"version":3,"sources":["components/navbar/navbar.js","components/images/Images.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","score","message","Images","onClick","eachClick","id","src","image","App","state","images","clickedImage","randoImg","i","length","k","Math","floor","random","mixImg","setState","includes","concat","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gi2DAgCeA,G,MA5BA,SAACC,GACZ,OAEI,yBAAKC,UAAU,uBAGX,yBAAKA,UAAU,qBACX,uBAAGA,UAAU,QAAb,gBAKJ,yBAAKA,UAAU,mBACX,uBAAGA,UAAU,QAAb,4BAKJ,yBAAKA,UAAU,mBACX,uBAAGA,UAAU,SAAb,WAA8BD,EAAME,MAApC,KAEA,uBAAGD,UAAU,QAAb,IAAsBD,EAAMG,QAA5B,S,OCHDC,G,MAnBA,SAACJ,GAChB,OACI,4BAAQC,UAAU,YACdI,QAAU,kBAAML,EAAMM,UAAUN,EAAMO,MAElC,yBAAKN,UAAU,aACP,yBAAKO,IAAKR,EAAMS,YC4FrBC,E,2MA7FbC,MAAQ,CAENC,SACAC,aAAc,GACdX,MAAO,G,EAMTY,SAAW,SAACF,GACV,IAAK,IAAIG,EAAIH,EAAOI,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC1C,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADE,EAEjB,CAACH,EAAOK,GAAIL,EAAOG,IAA3CH,EAAOG,GAFkC,KAE9BH,EAAOK,GAFuB,KAI5C,OAAOL,G,EAKTN,UAAY,SAAAC,GACV,IAAMc,EAAS,EAAKP,SAASF,GAC7B,EAAKU,SAAS,CAAEV,OAAQS,IAEpB,EAAKV,MAAME,aAAaU,SAAShB,GACnC,EAAKe,SAAS,CACZpB,MAAO,EACPW,aAAc,GACdV,QAAS,gDAIJ,EAAKQ,MAAMT,MAAQ,GAC1B,EAAKoB,SAAS,CACZT,aAAc,EAAKF,MAAME,aAAaW,OAAOjB,GAC7CL,MAAO,EAAKS,MAAMT,MAAQ,EAC1BC,QAAS,4BAMX,EAAKmB,SAAS,CACZT,aAAc,GACdX,MAAO,EACPC,QAAS,+B,wEAaL,IAAD,OACP,OACE,oCAEE,kBAAC,EAAD,CACAD,MAAQuB,KAAKd,MAAMT,MACnBC,QAASsB,KAAKd,MAAMR,UAKnBsB,KAAKd,MAAMC,OAAOc,KAAI,SAAAd,GAAM,OAE3B,kBAAC,EAAD,CACEe,IAAKf,EAAOL,GACZD,UAAW,EAAKA,UAChBQ,SAAU,EAAKA,SACfP,GAAIK,EAAOL,GACXE,MAAOG,EAAOH,WAhBpB,S,GA9DYmB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e8baad71.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './navbar.css'\r\n\r\n\r\nconst Navbar = (props) => {\r\n    return (\r\n\r\n        <div className=\"row w-100 pb-4 pt-4\" >\r\n\r\n\r\n            <div className='text-center  col '>\r\n                <p className=\"Text\">Clicky Game</p>\r\n            </div>\r\n\r\n\r\n\r\n            <div className=\"text-center col\">\r\n                <p className=\"Text\"> Click a Hero to begin </p>\r\n            </div>\r\n\r\n\r\n\r\n            <div className=\"text-center col\">\r\n                <p className=\"Text \"> Score: {props.score} </p>\r\n\r\n                <p className=\"Text\"> {props.message} </p>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport './Images.css';\r\n\r\nconst Images = (props) => {\r\nreturn(\r\n    <button className='imageCard'\r\n        onClick ={() => props.eachClick(props.id)}>\r\n\r\n            <div className='container'>\r\n                    <img src={props.image}/>\r\n                </div>\r\n    \r\n    \r\n    \r\n    </button>\r\n\r\n\r\n);\r\n\r\n\r\n}\r\n\r\nexport default Images\r\n","import React, { Component } from 'react';\nimport './components/navbar/navbar'\nimport Navbar from './components/navbar/navbar';\nimport images from './images.json'\nimport Images from './components/images/Images';\n\nclass App extends Component {\n\n  state = {\n\n    images,\n    clickedImage: [],\n    score: 0,\n\n  }\n\n\n\n  randoImg = (images) => {\n    for (var i = images.length - 1; i > 0; i--) {\n      var k = Math.floor(Math.random() * (i + 1));\n      [images[i], images[k]] = [images[k], images[i]];\n    }\n    return images;\n  }\n\n\n\n  eachClick = id => {\n    const mixImg = this.randoImg(images);\n    this.setState({ images: mixImg });\n\n    if (this.state.clickedImage.includes(id)) {\n      this.setState({\n        score: 0,\n        clickedImage: [],\n        message: \"Oops, It seems you already clicked that one\"\n      });\n    }\n\n    else if (this.state.score < 11) {\n      this.setState({\n        clickedImage: this.state.clickedImage.concat(id),\n        score: this.state.score + 1,\n        message: \"Don't get too confident\"\n\n      });\n    }\n\n    else {\n      this.setState({\n        clickedImage: [],\n        score: 0,\n        message: \"You won (Very Surprising)\"\n      })\n    }\n\n\n\n  }\n\n\n\n\n\n\n  render() {\n    return (\n      <>\n\n        <Navbar\n        score ={this.state.score}\n        message={this.state.message}\n         />\n\n\n\n        {this.state.images.map(images => (\n\n          <Images\n            key={images.id}\n            eachClick={this.eachClick}\n            randoImg={this.randoImg}\n            id={images.id}\n            image={images.image}\n\n          />\n\n        ))};\n\n\n\n          </>\n\n\n\n    )\n  }\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}